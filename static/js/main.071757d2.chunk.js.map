{"version":3,"sources":["components/Section/Section.js","components/Button/Buttons.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js","components/Section/Section.module.css","components/Button/Button.module.css"],"names":["Section","title","children","className","s","Buttons","names","onClick","Object","keys","map","name","index","type","button","Statistics","good","neutral","bad","total","positivePercentage","App","state","handleSum","handleOnClick","setState","prevState","handlePositivePercentage","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6SAEaA,EAAU,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAC5B,OACI,0BAASC,UAAWC,IAAEJ,QAAtB,UACKC,GAAS,6BAAKA,IACdC,M,gBCHAG,EAAU,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAC5B,OACIC,OAAOC,KAAKH,GAAOI,KAAK,SAACC,EAAMC,GAC3B,OAAO,wBAEHC,KAAK,SACLV,UAAWC,IAAEU,OACbP,QAAS,WAAOA,EAAQI,IAJrB,SAKLA,GAJOC,OCNRG,EAAa,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,mBACnD,OACI,gCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCFNC,E,4MACJC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,UAAY,WACV,MAA6B,EAAKD,MAClC,OADA,EAAON,KAAP,EAAaC,QAAb,EAAsBC,K,EAIxBM,cAAgB,SAACb,GACf,EAAKc,UAAS,SAAAC,GAAS,sBACpBf,EAAOe,EAAUf,GAAQ,O,EAI9BgB,yBAA2B,WACzB,MAA6B,EAAKL,MAA3BN,EAAP,EAAOA,KACDG,EAAQH,EADd,EAAaC,QAAb,EAAsBC,IAEtB,OAAOU,KAAKC,MAAMb,EAAOG,EAAQ,M,4CAGnC,WACE,MAA6BW,KAAKR,MAA3BN,EAAP,EAAOA,KAAMC,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,IAChBE,EAAqBU,KAAKH,2BAC1BR,EAAQW,KAAKP,YACnB,OACE,gCACE,cAAC,EAAD,CAAStB,MAAM,wBAAf,SACE,cAAC,EAAD,CAASK,MAAOwB,KAAKR,MAAOf,QAASuB,KAAKN,kBAE5C,cAAC,EAAD,CAASvB,MAAM,aAAf,SACGkB,EAAQ,cAAC,EAAD,CACPH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAAuB,6B,GAvCrCW,aA8CHV,ICxCAW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,2B,kBCA5BD,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.071757d2.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\nexport const Section = ({title, children}) => {\r\n    return (\r\n        <section className={s.Section}>\r\n            {title && <h2>{title}</h2>}\r\n            {children}\r\n        </section>\r\n    );\r\n}; \r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};","import PropTypes from 'prop-types';\r\nimport s from './Button.module.css';\r\n\r\nexport const Buttons = ({names, onClick}) => {\r\n    return (\r\n        Object.keys(names).map( (name, index) => {\r\n            return <button \r\n                key={index}\r\n                type=\"button\" \r\n                className={s.button}\r\n                onClick={() => {onClick(name)}}\r\n            >{name}</button>;\r\n        })\r\n    );\r\n};\r\n\r\nButtons.propTypes = {\r\n    names: PropTypes.shape({\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n    }),\r\n    onClick: PropTypes.func.isRequired,\r\n};","import PropTypes from 'prop-types';\r\nexport const Statistics = ({good, neutral, bad, total, positivePercentage}) => {\r\n    return (\r\n        <div>\r\n            <p>Good: {good}</p>\r\n            <p>Neutral: {neutral}</p>\r\n            <p>Bad: {bad}</p>\r\n            <p>Total: {total}</p>\r\n            <p>Positive feedback: {positivePercentage}%</p>\r\n        </div>\r\n    );\r\n}; \r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n};","import { Component } from 'react';\nimport './App.css';\nimport { Section } from './components/Section/Section';\nimport { Buttons } from './components/Button/Buttons';\nimport { Statistics } from './components/Statistics/Statistics';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  \n  handleSum = () => {\n    const {good, neutral, bad} = this.state;\n    return good + neutral + bad;\n  };\n\n  handleOnClick = (name) => {\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n  }));\n  };\n\n  handlePositivePercentage = () => {\n    const {good, neutral, bad} = this.state;\n    const total = good + neutral + bad;\n    return Math.round(good / total * 100);\n  };\n\n  render() {\n    const {good, neutral, bad} = this.state;\n    const positivePercentage = this.handlePositivePercentage();\n    const total = this.handleSum();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <Buttons names={this.state} onClick={this.handleOnClick}/>\n        </Section>\n        <Section title=\"Statistics\">\n          {total ? <Statistics \n            good={good} \n            neutral={neutral}\n            bad={bad} \n            total={total} \n            positivePercentage={positivePercentage}/>: 'No feedback given'}\n        </Section> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__2ROiw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__26Nw9\"};"],"sourceRoot":""}